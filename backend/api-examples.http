### Photobooth API - Praktische Beispiele und Workflows
### ============================================

@baseUrl = http://localhost:3000
@contentType = application/json

### ============================================
### WORKFLOW: Komplette Foto-Session
### ============================================

### 1. Session starten - Einstellungen prüfen
GET {{baseUrl}}/api/settings
Accept: application/json

> {%
    client.test("Settings loaded", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.config !== undefined, "Config is missing");
    });
    
    // Speichere wichtige Werte für spätere Requests
    client.global.set("cameraMode", response.body.config.camera.mode);
    client.global.set("printEnabled", response.body.config.print.enabled);
%}

###

### 2. Countdown starten und Foto aufnehmen
POST {{baseUrl}}/api/capture/countdown/start
Content-Type: {{contentType}}

{
  "seconds": 3
}

###

### 3. Foto aufnehmen
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "photo",
  "autoPrint": false
}

> {%
    client.test("Photo captured", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.success === true, "Capture was not successful");
    });
    
    // Speichere Foto-ID für weitere Aktionen
    client.global.set("lastPhotoId", response.body.filename.replace('.jpg', ''));
    client.global.set("lastPhotoPath", response.body.path);
%}

###

### 4. QR-Code für das Foto generieren
GET {{baseUrl}}/api/qrcode?imageId={{lastPhotoId}}
Accept: application/json

###

### 5. Foto drucken (wenn Drucker verfügbar)
POST {{baseUrl}}/api/print
Content-Type: {{contentType}}

{
  "imageId": "{{lastPhotoId}}",
  "copies": 1
}

###

### ============================================
### WORKFLOW: 4er Collage erstellen
### ============================================

### 1. Erstes Foto für Collage
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "collage",
  "collageLayout": "2x2",
  "collageIndex": 0
}

> {%
    client.global.set("collageId", response.body.filename.replace('.jpg', ''));
%}

###

### 2. Zweites Foto für Collage
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "collage",
  "collageLayout": "2x2",
  "collageIndex": 1
}

###

### 3. Drittes Foto für Collage
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "collage",
  "collageLayout": "2x2",
  "collageIndex": 2
}

###

### 4. Viertes Foto für Collage (letztes)
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "collage",
  "collageLayout": "2x2",
  "collageIndex": 3
}

###

### ============================================
### WORKFLOW: Greenscreen Session
### ============================================

### 1. Verfügbare Hintergründe abrufen
GET {{baseUrl}}/api/chromakeying/backgrounds
Accept: application/json

> {%
    client.test("Backgrounds available", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(Array.isArray(response.body), "Response is not an array");
    });
    
    if (response.body.length > 0) {
        client.global.set("backgroundImage", response.body[0]);
    }
%}

###

### 2. Foto mit Greenscreen aufnehmen
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "chromakey",
  "chromakeyBackground": "{{backgroundImage}}"
}

###

### ============================================
### WORKFLOW: Galerie durchsuchen
### ============================================

### 1. Neueste Fotos anzeigen
GET {{baseUrl}}/api/gallery/latest?limit=10
Accept: application/json

> {%
    client.test("Latest photos retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(Array.isArray(response.body), "Response is not an array");
    });
    
    if (response.body.length > 0) {
        client.global.set("firstImageId", response.body[0].id);
    }
%}

###

### 2. Galerie-Statistiken abrufen
GET {{baseUrl}}/api/gallery/stats
Accept: application/json

###

### 3. Zufällige Bilder für Slideshow
GET {{baseUrl}}/api/gallery/random?count=5
Accept: application/json

###

### ============================================
### WORKFLOW: Admin-Funktionen
### ============================================

### 1. Admin Login
POST {{baseUrl}}/api/admin/login
Content-Type: {{contentType}}

{
  "password": "admin"
}

> {%
    client.test("Admin login successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.success === true, "Login was not successful");
    });
    
    if (response.body.token) {
        client.global.set("adminToken", response.body.token);
    }
%}

###

### 2. System-Status prüfen
GET {{baseUrl}}/api/admin/status
Accept: application/json

###

### 3. Galerie-Datenbank neu aufbauen
POST {{baseUrl}}/api/gallery/rebuild
Accept: application/json

###

### 4. Alte Bilder löschen (Cleanup)
DELETE {{baseUrl}}/api/gallery/bulk
Content-Type: {{contentType}}

{
  "ids": ["photo_old1", "photo_old2"],
  "deleteFromRemote": true
}

###

### ============================================
### WORKFLOW: Hardware Testing
### ============================================

### 1. Hardware-Status prüfen
GET {{baseUrl}}/api/hardware/status
Accept: application/json

> {%
    client.test("Hardware status retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.camera !== undefined, "Camera status missing");
        client.assert(response.body.gpio !== undefined, "GPIO status missing");
    });
%}

###

### 2. Kamera-Einstellungen abrufen
GET {{baseUrl}}/api/hardware/camera/settings
Accept: application/json

###

### 3. Test-Foto mit Hardware-API
POST {{baseUrl}}/api/hardware/camera/capture
Content-Type: {{contentType}}

{
  "countdown": 5,
  "sound": true,
  "flash": true,
  "saveToGallery": true
}

###

### 4. LED blinken lassen (Test)
POST {{baseUrl}}/api/hardware/gpio/led/status/blink
Content-Type: {{contentType}}

{
  "times": 3,
  "interval": 500
}

###

### 5. Hardware-Verbindung testen
POST {{baseUrl}}/api/hardware/test-connection
Accept: application/json

###

### ============================================
### DEBUGGING & TROUBLESHOOTING
### ============================================

### Prüfe ob Server läuft
GET {{baseUrl}}/
Accept: application/json

###

### Prüfe API-Dokumentation
GET {{baseUrl}}/docs
Accept: text/html

###

### Ungültiger Request testen (Error Handling)
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "invalid_mode"
}

###

### Test mit fehlenden Parametern
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{}

###

### Test mit zu großen Werten
GET {{baseUrl}}/api/gallery?page=99999&limit=10000
Accept: application/json

###

### ============================================
### PERFORMANCE TESTING
### ============================================

### Schnelle Foto-Serie (Stress Test)
POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "photo"
}

###

POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "photo"
}

###

POST {{baseUrl}}/api/capture
Content-Type: {{contentType}}

{
  "mode": "photo"
}

###

### Große Galerie-Abfrage
GET {{baseUrl}}/api/gallery?page=1&limit=100&includeThumbnails=true
Accept: application/json
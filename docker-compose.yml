version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: photobooth-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-photobooth}
      POSTGRES_USER: ${DB_USER:-photobooth}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-photobooth123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-photobooth}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: photobooth-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # NestJS Backend
  backend:
    build:
      context: .
      dockerfile: backend.Dockerfile
      target: production
    image: photobooth-backend:latest
    container_name: photobooth-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      # Database
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DB_NAME:-photobooth}
      DATABASE_USER: ${DB_USER:-photobooth}
      DATABASE_PASSWORD: ${DB_PASSWORD:-photobooth123}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # JWT
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      # Hardware
      HARDWARE_MOCK: ${HARDWARE_MOCK:-true}
      # File paths
      IMAGES_PATH: /app/data/images
      CONFIG_PATH: /app/data/config
      LOGS_PATH: /app/logs
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - ./data/images:/app/data/images
      - ./data/config:/app/data/config
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (r) => {r.statusCode === 200 ? process.exit(0) : process.exit(1)})"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
      target: production
    image: photobooth-frontend:latest
    container_name: photobooth-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Adminer for Database Management (Development only)
  adminer:
    image: adminer:latest
    container_name: photobooth-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - photobooth-network
    profiles:
      - development

networks:
  photobooth-network:
    driver: bridge
    name: photobooth-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: photobooth-postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups/postgres:/backups
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: photobooth-redis
    restart: always
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # NestJS Backend (Production)
  backend:
    image: ${DOCKER_REGISTRY:-docker.io}/photobooth-backend:${VERSION:-latest}
    container_name: photobooth-backend
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3000
      # Database
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DB_NAME}
      DATABASE_USER: ${DB_USER}
      DATABASE_PASSWORD: ${DB_PASSWORD}
      DATABASE_SYNCHRONIZE: false
      DATABASE_LOGGING: false
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-7d}
      # Hardware
      HARDWARE_MOCK: ${HARDWARE_MOCK:-false}
      GPIO_ENABLED: ${GPIO_ENABLED:-true}
      CAMERA_TYPE: ${CAMERA_TYPE:-gphoto2}
      # File paths
      IMAGES_PATH: /app/data/images
      CONFIG_PATH: /app/data/config
      LOGS_PATH: /app/logs
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60000}
    volumes:
      - ./data/images:/app/data/images
      - ./data/config:/app/data/config
      - ./logs:/app/logs
      - /dev/bus/usb:/dev/bus/usb:rw  # For camera access
    devices:
      - /dev/gpiomem:/dev/gpiomem  # For GPIO access on Raspberry Pi
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Angular Frontend with Nginx (Production)
  frontend:
    image: ${DOCKER_REGISTRY:-docker.io}/photobooth-frontend:${VERSION:-latest}
    container_name: photobooth-frontend
    restart: always
    environment:
      NGINX_HOST: ${NGINX_HOST:-localhost}
      NGINX_PORT: 80
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_SSL_PORT:-443}:443"
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/custom.conf:/etc/nginx/conf.d/custom.conf:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - photobooth-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.25'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service (runs periodically)
  backup:
    image: postgres:15-alpine
    container_name: photobooth-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      BACKUP_DIR: /backups
      BACKUP_KEEP_DAYS: ${BACKUP_KEEP_DAYS:-7}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - photobooth-network
    depends_on:
      - postgres
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while true; do
          echo "Running backup at $$(date)"
          /backup.sh
          echo "Backup completed. Sleeping for 24 hours..."
          sleep 86400
        done
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

networks:
  photobooth-network:
    driver: bridge
    name: photobooth-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
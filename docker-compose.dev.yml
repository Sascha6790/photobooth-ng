version: '3.8'

services:
  # PostgreSQL Database (Development)
  postgres:
    image: postgres:15-alpine
    container_name: photobooth-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: photobooth_dev
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: dev123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./data/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - photobooth-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U developer"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis Cache (Development)
  redis:
    image: redis:7-alpine
    container_name: photobooth-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --loglevel debug
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - photobooth-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # NestJS Backend (Development with Hot Reload)
  backend:
    build:
      context: .
      dockerfile: backend.dev.Dockerfile
    image: photobooth-backend-dev:latest
    container_name: photobooth-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      # Database
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: photobooth_dev
      DATABASE_USER: developer
      DATABASE_PASSWORD: dev123
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # JWT
      JWT_SECRET: dev-secret-key
      # Hardware
      HARDWARE_MOCK: true
      # File paths
      IMAGES_PATH: /app/data/images
      CONFIG_PATH: /app/data/config
      LOGS_PATH: /app/logs
      # Debug
      DEBUG: true
      LOG_LEVEL: debug
    ports:
      - "3000:3000"
      - "9229:9229"  # Node.js debugger port
    volumes:
      # Source code for hot reload
      - ./backend:/app/backend:cached
      - ./package.json:/app/package.json:cached
      - ./package-lock.json:/app/package-lock.json:cached
      - ./nx.json:/app/nx.json:cached
      - ./tsconfig.base.json:/app/tsconfig.base.json:cached
      # Data volumes
      - ./data/images:/app/data/images
      - ./data/config:/app/data/config
      - ./logs:/app/logs
      # Exclude node_modules
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - photobooth-dev-network
    command: npm run start:backend:dev

  # Angular Frontend (Development with Hot Reload)
  frontend:
    build:
      context: .
      dockerfile: frontend.dev.Dockerfile
    image: photobooth-frontend-dev:latest
    container_name: photobooth-frontend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
    ports:
      - "4200:4200"
      - "49153:49153"  # Angular Live Reload WebSocket
    volumes:
      # Source code for hot reload
      - ./frontend:/app/frontend:cached
      - ./package.json:/app/package.json:cached
      - ./package-lock.json:/app/package-lock.json:cached
      - ./nx.json:/app/nx.json:cached
      - ./tsconfig.base.json:/app/tsconfig.base.json:cached
      # Exclude node_modules
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - photobooth-dev-network
    command: npm run start:frontend

  # Adminer for Database Management
  adminer:
    image: adminer:latest
    container_name: photobooth-adminer-dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - postgres
    networks:
      - photobooth-dev-network

  # MailHog for Email Testing (Development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: photobooth-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - photobooth-dev-network

  # Redis Commander for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: photobooth-redis-commander-dev
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - photobooth-dev-network

networks:
  photobooth-dev-network:
    driver: bridge
    name: photobooth-dev-network

volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local